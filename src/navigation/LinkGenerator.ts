import { PAGES, settings } from "./Constants"
/**
   * @Method
   * Uses UTF-8 encoding scheme, imitates links generated by Ojet Core Router.
   *    ";" ==>  "%3B"  ,  "=" ==> "%3D"
   * @Results
   * Following results will be URI encoded/decoded
   * No page // Error:      ?ojr=#
   * Page without params:   ?ojr={page}; 
   * Page with params:      ?ojr={page};{param1=value1};{param2=value2}... 
**/

const prefix = "?ojr="
const noLink = "#"
const pageSeperator = ";"
const querySeperator = "="
const fallbackPage = PAGES.DASHBOARD;

/* Order is important in function parameters. Params if provided take precedence over id and number
Provide page and params in case of class C, class D, CMRT, Copy BOS */
//TODO - Add name as third parameter
export const generateHref = (page: string, id?: string, number?: string, params?: {}) => {
  let link: string;
  if (params){
    link = getHref(page, params);
  } else {
    let pageSetting = settings.get(page);
    let map: Map<string, string> = new Map<string, string>();
    if (pageSetting?.id && !Array.isArray(pageSetting.id) && id){
      map.set(pageSetting.id, id);
    }
    if (pageSetting?.number && !Array.isArray(pageSetting.number) && number){
      map.set(pageSetting.number, number);
    }
    link = getHref(page, Object.fromEntries(map));
  }
  return link;
}

/* Generates link from page and params */
export const getHref = (page: string, params?) => {
    let link: string; 
    try {
        if (!page){
            link = prefix.concat(noLink);
        } else {
            let url = page.concat(pageSeperator);
            if (params){
                for (let property in params){
                    let value = params[property];
                    if (value){
                        url = url.concat(property).concat(querySeperator).concat(value).concat(pageSeperator);
                    }
                }
                url.slice(0,-1);
            }
            link = prefix.concat(encodeURIComponent(url))
        }
    } catch (error) {
        link = prefix.concat(noLink);
    }
    return link;
}

/** Generates page and params from link
   * @Returns
   * {page: page, params: {}}
**/
export const getPageParamsFromLink = (link: string) => {
  let obj: {page: string, params?: {}};
  let searchParams = link.split(prefix)[1];
  if (!searchParams){
    obj = {page: fallbackPage};
  } else {
    try {
      let decodedParams = decodeURIComponent(searchParams);
      let array: string[] = decodedParams.split(pageSeperator);
      const page = array[0];
      array.shift();
      let paramMap = new Map<string, string>();
      array.forEach(param => {
        if (param){
          let key  = param.split(querySeperator)[0];
          let value = param.split(querySeperator)[1];
          paramMap.set(decodeURIComponent(key), decodeURIComponent(value));
        }
      })
      const params = Object.fromEntries(paramMap);
      obj = {page: page, params: params};
    } catch (error) {
      obj = {page: fallbackPage};
    }
  }
  return obj;
}